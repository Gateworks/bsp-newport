#!/bin/bash
# usage: mkimage <outfile> <imagesz_mb> <partsz_mb> <firmware> <files|dirs>
#
# Gateworks 8GiB emmc has a user part of 7264MB
#
# Examples:
#   - create a 7.1GB disk image with 1.5GB ext4
#   mkimage xenial-newport 7264 1536 firmware-newport.img \
#        xenial-newport.tar.xz linux-newport.tar.xz
#

OUT=$1
shift
SIZEMB=$1
shift
SIZEPART=${1:-$SIZEMB}
shift
FIRMWARE=$1
shift
PARTOFFSETMB=16
PARTBYTES=$(( $((SIZEPART-PARTOFFSETMB)) * 1024 * 1024))
PARTSECTOR=$((PARTOFFSETMB * 1024 * 1024 / 512))

[ $UID -eq 0 ] || { echo "$0: must run as root"; exit 1; }

# create ext4 filesystem image
truncate -s ${SIZEPART}M $OUT.ext4
mkfs.ext4 -q -F -L rootfs $OUT.ext4
# mount it
tmp_mnt=$(mktemp -d -p/tmp)
mount $OUT.ext4 ${tmp_mnt}
# copy files to it
while [ $1 ]; do
  echo "$i"
  if [ -d $1 ]; then
    cp -rup $1/* ${tmp_mnt}
    case $? in
       0);;
       *) echo "$0: failure copying$1: $?"; exit 3;;
    esac
  else
    tar -C ${tmp_mnt} -xf $1
    case $? in
       0);;
       2) echo "$0: Error insufficient filesystem size"; exit 2;;
       *) echo "$0: failure extracting $1: $?"; exit 3;;
    esac
  fi
  shift
done
umount ${tmp_mnt}
rm -rf ${tmp_mnt}
sync
# compress it
gzip -k -f $OUT.ext4

# create disk image (partition table + firmware + rootfs)
# start with firmware
cp $FIRMWARE $OUT.img
# resize it to the size of our final device (so sfdisk can partition it)
truncate -s ${SIZEMB}M $OUT.img # using truncate creates a sparse file
# partition: 2.5MB DOS partition, Linux partition at 16MB
printf "3072,5120,1,,\n${PARTSECTOR},,L,,\n" | sudo sfdisk -uS $OUT.img
# copy filesystem to 16MB offset
dd if=$OUT.ext4 of=$OUT.img bs=${PARTOFFSETMB}M seek=1
# compress
gzip -k -f $OUT.img
ls -lh $OUT.*

echo "To update from uboot:"
if [ "$SIZEPART" -gt 4096 ]; then
   echo "tftpboot \${loadaddr} $OUT.img.gz && gzwrite mmc 0 \${loadaddr} \${filesize} 100000 0 $(printf "%x"
$(($SIZEMB*1024*1024)))"
else
   echo "tftpboot \${loadaddr} $OUT.img.gz && gzwrite mmc 0 \${loadaddr} \${filesize}"
fi
